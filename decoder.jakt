import bitstream { BitStream }
import util { array_copy, combine_two_bytes, flatten, join, map, panic, pow, print_in_rows, sort, to_string }

struct Color {
    r: u8
    g: u8
    b: u8
}

struct GIF {
    signature: String
    screen_descriptor: ScreenDescriptor
    global_color_map: [Color]?
    frames: [GIFFrame]
}

struct GIFFrame {
    image_descriptor: ImageDescriptor
    global_color_map: [Color]?
    local_color_map: [Color]?
    application_extension: ApplicationExtension?
    comment_extension: CommentExtension?
    graphic_control_extension: GraphicControlExtension?
    plain_text_extension: PlainTextExtension?
    raster_data: RasterData
}

class GIFDecoder {
    current: usize
    bytes: [u8]

    public fn init(anon bytes: [u8]) throws -> GIFDecoder => GIFDecoder(current: 0, bytes)

    public fn decode(mut this) throws -> GIF {
        // 1. GIF Signature
        let signature = .gif_signature()
        guard signature == "GIF89a" or signature == "GIF87a" else {
            eprintln("Not a gif file. expected gif signature, got {}", signature)
            abort()
        }

        // 2. Screen Descriptor
        let screen_descriptor = .screen_descriptor()

        // 3. Global Color Map
        let global_color_map: [Color]? = match screen_descriptor.global_color_map_follows_descriptor {
            true => .color_map(size: pow(base: 2u64, exponent: screen_descriptor.bits_per_pixel_in_image as! u64 + 1))
            false => None
        }
        mut frames: [GIFFrame] = []
        loop {
            mut application_extension: ApplicationExtension? = None
            mut comment_extension: CommentExtension? = None
            mut graphic_control_extension: GraphicControlExtension? = None
            mut plain_text_extension: PlainTextExtension? = None
            let byte = .bytes[.current++]
            match byte {
                0x3b => { break }
                0x21 => {
                    let extension_label = .bytes[.current++]
                    match extension_label {
                        0xFF => { application_extension = .application_extension() }
                        0xFE => { comment_extension = .comment_extension() }
                        0xF9 => { graphic_control_extension = .graphic_control_extension() }
                        0x01 => { plain_text_extension = .plain_text_extension() }
                        else => { panic(format("Unrecognized extension label: {} ", extension_label)) }
                    }
                }
                0x2c => {
                    // 4. Image Descriptor
                    let image_descriptor = .image_descriptor()

                    // 5. Local Color Map
                    let local_color_map: [Color]? = match image_descriptor.use_local_color_map {
                        true => .color_map(size: pow(base: 2u64, exponent: image_descriptor.bits_per_pixel! as! u64 + 1))
                        false => None
                    }
                    // 6. Raster Data
                    let raster_data = .raster_data()

                    frames.push(GIFFrame(
                        image_descriptor
                        global_color_map
                        local_color_map
                        application_extension
                        comment_extension
                        graphic_control_extension
                        plain_text_extension
                        raster_data
                    ))
                }
                else => { panic(format("Unexpected byte: {:X}", byte)) }
            }
        }

        return GIF(
            signature
            screen_descriptor
            global_color_map
            frames
        )
    }

    fn gif_signature(mut this) throws -> String {
        mut builder = StringBuilder::create()
        for i in 0..6 {
            builder.append(.bytes[i])
        }
        .current = 6
        return builder.to_string()
    }

    fn screen_descriptor(mut this) -> ScreenDescriptor {
        let screen_width = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let screen_height = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let byte_5 = .bytes[.current++]
        let global_color_map_follows_descriptor = (byte_5 & 0b10000000) != 0
        let bits_of_color_resolution = (byte_5 & 0b01110000) >> 4
        let bits_per_pixel_in_image = byte_5 & 0b00000111
        let background = .bytes[.current++]
        let byte_7 = .bytes[.current++]
        guard byte_7 == 0 else {
            eprintln("expected byte 7 of screen descriptor to be 0, got: {:b}", byte_7)
            abort()
        }

        return ScreenDescriptor(
            screen_width
            screen_height
            global_color_map_follows_descriptor
            bits_of_color_resolution
            bits_per_pixel_in_image
            background
        )
    }

    fn color_map(mut this, size: u64) throws -> [Color] {
        mut color_map: [Color] = []
        color_map.ensure_capacity(size as! usize)
        for _ in 0..(size) {
            color_map.push(Color(
                r: .bytes[.current++]
                g: .bytes[.current++]
                b: .bytes[.current++]
            ))
        }
        return color_map
    }

    fn image_descriptor(mut this) -> ImageDescriptor {
        let image_left = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let image_top = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let image_width = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let image_height = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])

        let byte_10 = .bytes[.current++]
        let use_local_color_map = (byte_10 & 0b10000000) != 0
        let format_mode = match byte_10 & 0b01000000 {
            0 => ImageFormatMode::Sequential
            else => ImageFormatMode::Interlaced
        }
        let bits_per_pixel: u8? = match use_local_color_map {
            true => None
            false => byte_10 & 0b00000111
        }

        return ImageDescriptor(
            image_left
            image_top
            image_width
            image_height
            use_local_color_map
            format_mode
            bits_per_pixel
        )
    }

    fn raster_data(mut this) throws -> RasterData {
        let lzw_minimum_code_size = .bytes[.current++]
        mut rows: [[u8]] = []
        loop {
            let bytes_in_sub_block = .bytes[.current++]
            if bytes_in_sub_block == 0 { break }
            mut sub_block: [u8] = []
            sub_block.ensure_capacity(bytes_in_sub_block as! usize)
            for _ in 0..bytes_in_sub_block {
                sub_block.push(.bytes[.current++])
            }
            rows.push(sub_block)
        }
        return RasterData(
            lzw_minimum_code_size
            sub_blocks: rows
        )
    }

    fn gif_terminator(mut this) {
        let terminator = .bytes[.current++]
        guard terminator == b';' else {
            eprintln("expected terminator `{}`, got: {:x}", b';', terminator)
            abort()
        }
    }

    fn application_extension(mut this) throws -> ApplicationExtension {
        let block_size = .bytes[.current++]
        guard block_size == 11 else {
            panic(format("Expected block size 11, got: {}", block_size))
        }
        for c in [b'N', b'E', b'T', b'S', b'C', b'A', b'P', b'E', b'2', b'.', b'0'] {
            let byte = .bytes[.current++]
            guard byte == c else {
                panic(format("Expected byte to be {:c}, got {:c}", c, byte))
            }
        }
        mut application_data: [[u8]] = []
        loop {
            let bytes_in_sub_block = .bytes[.current++]
            if bytes_in_sub_block == 0 { break }
            mut sub_block: [u8] = []
            sub_block.ensure_capacity(bytes_in_sub_block as! usize)
            for _ in 0..bytes_in_sub_block {
                sub_block.push(.bytes[.current++])
            }
            application_data.push(sub_block)
        }

        return ApplicationExtension(application_data)
    }

    fn comment_extension(mut this) throws -> CommentExtension {
        mut bytes: [u8] = []
        loop {
            let byte = .bytes[.current++]
            if byte == 0 { break }
            bytes.push(byte)
        }

        return CommentExtension(text: to_string(bytes))
    }

    fn graphic_control_extension(mut this) throws -> GraphicControlExtension {
        let block_size = .bytes[.current++]
        guard block_size == 4 else {
            panic(format("Expected block size 4, got {}", block_size))
        }

        let byte = .bytes[.current++]
        let transparent_color_flag = (byte & 0b1) != 0
        let user_input_flag = (byte & 0b10) != 0
        let disposal_method = DisposalMethod::from_byte((byte & 0b11100) >> 2)

        let delay_time = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let transparent_color_index = .bytes[.current++]
        let block_terminator = .bytes[.current++]
        guard block_terminator == 0 else {
            panic(format("Expected block terminator 0, got {}", block_terminator))
        }

        return GraphicControlExtension(
            disposal_method
            user_input_expected: user_input_flag
            has_transparent_index: transparent_color_flag
            delay_time
            transparency_index: transparent_color_index
        )
    }

    fn plain_text_extension(mut this) throws -> PlainTextExtension {
        let block_size = .bytes[.current++]
        let text_grid_left = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let text_grid_top = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let text_grid_width = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let text_grid_height = combine_two_bytes(lsb: .bytes[.current++], msb: .bytes[.current++])
        let character_cell_width = .bytes[.current++]
        let character_cell_height = .bytes[.current++]
        let text_foreground_color_index = .bytes[.current++]
        let text_background_color_index = .bytes[.current++]
        mut subblocks: [[u8]] = []
        loop {
            let bytes_in_sub_block = .bytes[.current++]
            if bytes_in_sub_block == 0 { break }
            mut sub_block: [u8] = []
            sub_block.ensure_capacity(bytes_in_sub_block as! usize)
            for _ in 0..bytes_in_sub_block {
                sub_block.push(.bytes[.current++])
            }
            subblocks.push(sub_block)
        }

        return PlainTextExtension(
            block_size
            text_grid_left
            text_grid_top
            text_grid_width
            text_grid_height
            character_cell_width
            character_cell_height
            text_foreground_color_index
            text_background_color_index
            subblocks
        )
    }
}

struct ScreenDescriptor {
    screen_width: u16
    screen_height: u16
    global_color_map_follows_descriptor: bool
    bits_of_color_resolution: u8
    bits_per_pixel_in_image: u8
    background: u8
}

enum ImageFormatMode {
    Sequential
    Interlaced
}

struct ImageDescriptor {
    image_left: u16
    image_top: u16
    image_width: u16
    image_height: u16
    use_local_color_map: bool
    format_mode: ImageFormatMode
    bits_per_pixel: u8?
}

struct RasterData {
    lzw_minimum_code_size: u8
    sub_blocks: [[u8]]

    fn number_of_bits(this) -> u64 {
        return (.sub_blocks.size() * .sub_blocks[0].size() * 8) as! u64
    }

    fn to_code_stream(this) throws -> CodeStream {
        mut bitstream = BitStream::init(bytes: flatten(.sub_blocks))
        mut size = .lzw_minimum_code_size as! u16 + 1
        mut codestream: [u64] = []

        mut bits_read = 0u64
        mut i = 0u64
        while (bits_read + (size as! u64)) < .number_of_bits() {
            codestream.push(bitstream.read(bits: size))
            bits_read += size as! u64
            if ++i == pow(base: 2, exponent: (size - 1) as! u64) {
                if size == (0b111111111111 as! u16) {
                    size = .lzw_minimum_code_size as! u16 + 1
                } else {
                    size++
                }

                i = 0
            }
        }

        guard .number_of_bits() - bits_read < 0b1111111111111111 else {
            eprintln(
                "too many bits left to read. expected less than {}, got {}"
                0b1111111111111111
                .number_of_bits() - bits_read
            )
            abort()
        }
        let leftovers = bitstream.read(bits: (.number_of_bits() - bits_read) as! u16)
        guard leftovers == 0 else {
            eprintln("expected leftovers to be 0, got {}", leftovers)
            abort()
        }

        return CodeStream(
            lzw_minimum_code_size: .lzw_minimum_code_size
            codes: codestream
        )
    }
}

struct CodeStream {
    lzw_minimum_code_size: u8
    codes: [u64]

    fn decode(this, code_table: &mut CodeTable) throws -> IndexStream {
        mut indices: [u64] = []

        let first_code_values = code_table.get(.codes[0])!
        guard first_code_values[0] is Clear else {
            eprintln("codes should start with the clear code")
            abort()
        }
        // let CODE be the first code in the code stream
        mut code = .codes[1]
        // output {CODE} to index stream
        indices.push(code)

        // set PREVCODE = CODE
        mut prevcode = code
        for i in 2..(.codes.size() - 1) {
            // let CODE be the next code in the code stream
            code = .codes[i]
            // is CODE in the code table?
            if code_table.get(code) is Some(value) {
                // Yes:
                // output {CODE} to index stream
                for val in value {
                    match val {
                        Color(index) => { indices.push(index) }
                        else => {}
                    }
                }
                // let K be the first index in {CODE}
                let k = value[0]
                // add {PREVCODE}+K to the code table
                mut new_value = array_copy(code_table.get(prevcode)!)
                new_value.push(k)
                code_table.add(new_value)
                // set PREVCODE = CODE
                prevcode = code
            } else {
                // No:
                // let K be the first index of {PREVCODE}
                mut new_value = array_copy(code_table.get(prevcode)!)
                let k = new_value[0]
                new_value.push(k)
                // output {PREVCODE}+K to index stream
                for val in new_value {
                    match val {
                        Color(index) => { indices.push(index) }
                        else => {}
                    }
                }
                // add {PREVCODE}+K to code table
                code_table.add(new_value)
                // set PREVCODE = CODE
                prevcode = code
            }
        }

        return IndexStream(indices)
    }
}

enum CodeTableValue {
    Color(u64)
    Clear
    EOI
}

struct CodeTable {
    private table: [u64:[CodeTableValue]]
    fn init(color_map: [Color]) throws -> CodeTable {
        mut code_table = CodeTable(table: [:])
        for i in 0..color_map.size() as! u64 {
            code_table.add([CodeTableValue::Color(i)])
        }
        code_table.add([CodeTableValue::Clear])
        code_table.add([CodeTableValue::EOI])
        return code_table
    }
    fn set(mut this, anon key: u64, anon val: [CodeTableValue]) throws {.table.set(key, val)}
    fn add(mut this, anon val: [CodeTableValue]) throws {.table.set(.table.keys().size() as! u64, val)}
    fn get(this, anon key: u64) -> [CodeTableValue]? => .table.get(key)
    fn has(this, anon key: u64) -> bool => .table.contains(key)

    fn to_string(this) throws -> String {
        mut builder = StringBuilder::create()
        builder.append("[\n")
        for key in sort(.table.keys()) {
            let value = .table.get(key)
            let s = match value.has_value() {
                true => code_table_value_array_to_string(value!)
                false => ""
            }
            builder.append(format("\t{}: {}\n", key, s))
        }
        builder.append("]")
        return builder.to_string()
    }
}

struct IndexStream {
    indices: [u64]
}

fn code_table_value_array_to_string(anon arr: [CodeTableValue]) throws -> String {
    return join(
        map(
            arr,
            fn(t: CodeTableValue) throws -> String => match t {
                Color(c) => format("{}", c)
                else => format("{}", t)
            }
        ),
        separator: ", "
    )
}

struct ApplicationExtension {
    application_data: [[u8]]
}
struct CommentExtension {
    text: String
}
enum DisposalMethod {
    NoDisposalSpecified
    DoNotDispose
    RestoreToBackground
    RestoreToPrevious

    fn from_byte(anon b: u8) throws -> DisposalMethod => match b {
        0u8 => DisposalMethod::NoDisposalSpecified
        1u8 => DisposalMethod::DoNotDispose
        2u8 => DisposalMethod::RestoreToBackground
        3u8 => DisposalMethod::RestoreToPrevious
        else => { panic(format("Unrecognized byte for disposal method: {}", b)) }
    }
}
struct GraphicControlExtension {
    disposal_method: DisposalMethod
    user_input_expected: bool
    has_transparent_index: bool
    delay_time: u16
    transparency_index: u8
}
struct PlainTextExtension {
    block_size: u8
    text_grid_left: u16
    text_grid_top: u16
    text_grid_width: u16
    text_grid_height: u16
    character_cell_width: u8
    character_cell_height: u8
    text_foreground_color_index: u8
    text_background_color_index: u8
    subblocks: [[u8]]
}
