import decoder { CodeTable, Color, GIF }
import util { join, map, print_in_rows }
import debug { DebugArgs, write_to_file }

struct CLIRenderer {
    fn render(anon gif: GIF, debug_args: DebugArgs? = None) throws {
        if debug_args?.debug_codestream.value_or(false) {
            mut codes: [String] = []
            for frame in gif.frames {
                let code_stream = frame.raster_data.to_code_stream()
                codes.push_values(&map(code_stream.codes, fn(t: u64) throws -> String => format("{}", t)))
            }
            write_to_file(
                path: debug_args.value().codestream_filename
                data: join(codes, separator: "\n")
            )
            abort()
        }
        if debug_args?.debug_codetable.value_or(false) {
            mut tables: [String] = []
            for frame in gif.frames {
                let code_stream = frame.raster_data.to_code_stream()
                let color_map = frame.local_color_map ?? frame.global_color_map!
                mut code_table = CodeTable::init(color_map)
                let index_stream = code_stream.decode(code_table: &mut code_table)
                tables.push(code_table.to_string())
            }
            write_to_file(
                path: debug_args.value().codetable_filename
                data: join(tables, separator: "\n")
            )
            abort()
        }

        for frame in gif.frames {
            let code_stream = frame.raster_data.to_code_stream()
            let color_map = frame.local_color_map ?? frame.global_color_map!
            mut code_table = CodeTable::init(color_map)
            let index_stream = code_stream.decode(code_table: &mut code_table)
            let colors = map(index_stream.indices, fn[&color_map](t: u64) throws -> Color => color_map[t])
            let strs = map(
                colors
                fn(t: Color) throws -> String => format(
                    "\033[48;2;{};{};{}m \033[0m",
                    t.r,
                    t.g,
                    t.b
                )
            )
            print_in_rows(strs, row_length: frame.image_descriptor.image_width as! u64)
        }
    }
}